akka {
  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  
  persistence.journal.plugin = "cassandra-journal"
  
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      bind-hostname = ${clustering.ip}
      bind-port = ${clustering.port} 
    
      hostname = ${clustering.host_ip}
      port = ${clustering.host_port}
    }
  }
     
  cluster {
    seed-nodes = [
      "akka.tcp://"${clustering.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]
  }
}

ts-reaktive {
  replication {
    read-journal-plugin-id = "cassandra-query-journal"
    event-classifiers {
      "com.tradeshift.reaktive.replication.TestData$TestEvent" = "com.tradeshift.reaktive.replication.TestEventClassifier"
    }
  }
}

cassandra-journal {
  contact-points = [ "localhost" ]
  pubsub-minimum-interval = 100ms
}

cassandra-query-journal {
  eventual-consistency-delay = 0s // we want immediate results, even if they're inconsistent between multiple queries
  refresh-interval = 1s           
}

clustering {
  host_ip = ${clustering.ip}       // The IP address to announce to other nodes for reaching this one
  host_ip = ${?CLUSTER_HOST_IP}
  host_port = ${clustering.port}   // The port to announce to other nodes for reaching this one
  host_port = ${?CLUSTER_HOST_PORT}
  ip = "127.0.0.1"      // The IP address to bind akka clustering to
  ip = ${?CLUSTER_IP}
  port = 1426           // The port to bind akka clustering to
  port = ${?CLUSTER_PORT}
  seed-ip = "127.0.0.1"
  seed-ip = ${?CLUSTER_IP}
  seed-ip = ${?SEED_PORT_2552_TCP_ADDR}
  seed-port = ${clustering.port}
  seed-port = ${?SEED_PORT_2552_TCP_PORT}
  name = ReplicationIntegrationSpec
}
